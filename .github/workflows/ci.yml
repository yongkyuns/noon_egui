# on: [push, pull_request]

# name: CI

# env:
#   # This is required to enable the web_sys clipboard API which egui_web uses
#   # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
#   # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html
#   RUSTFLAGS: --cfg=web_sys_unstable_apis

# jobs:
#   check:
#     name: Check
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: stable
#           override: true
#       - uses: actions-rs/cargo@v1
#         with:
#           command: check
#           args: --all-features

#   check_wasm:
#     name: Check wasm32
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: stable
#           override: true
#       - run: rustup target add wasm32-unknown-unknown
#       - uses: actions-rs/cargo@v1
#         with:
#           command: check
#           args: --all-features --lib --target wasm32-unknown-unknown

#   test:
#     name: Test Suite
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: stable
#           override: true
#       - run: sudo apt-get install libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev
#       - uses: actions-rs/cargo@v1
#         with:
#           command: test
#           args: --lib

#   fmt:
#     name: Rustfmt
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: stable
#           override: true
#       - run: rustup component add rustfmt
#       - uses: actions-rs/cargo@v1
#         with:
#           command: fmt
#           args: --all -- --check

#   clippy:
#     name: Clippy
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: stable
#           override: true
#       - run: rustup component add clippy
#       - uses: actions-rs/cargo@v1
#         with:
#           command: clippy
#           args: -- -D warnings

name: CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:

  build:
    name: Build
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
      - run: rustup component add rustfmt
      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - run: rustup component add clippy
      - name: Linter
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -Dwarnings


  # check:
  #   name: Check
  #   strategy:
  #     matrix:
  #       os: [windows-latest, macos-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: check

  # test:
  #   name: Test Suite
  #   strategy:
  #     matrix:
  #       os: [windows-latest, macos-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: test

  # fmt:
  #   name: Rustfmt
  #   strategy:
  #     matrix:
  #       os: [windows-latest, macos-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     - run: rustup component add rustfmt
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: fmt
  #         args: --all -- --check

  # clippy:
  #   name: Clippy
  #   strategy:
  #     matrix:
  #       os: [windows-latest, macos-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     - run: rustup component add clippy
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: clippy
  #         args: -- -Dwarnings




      # - name: Test
      #   run: cargo test
      # - name: Clippy
      #   run: |
      #     rustup component add clippy
      #     cargo clippy --all-targets




  # check-macos-arm:
  #   runs-on: macos-11
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install target
  #       run: rustup update && rustup target add aarch64-apple-darwin
  #     - name: Check build
  #       run: cargo check --target=aarch64-apple-darwin
